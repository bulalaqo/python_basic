<修饰器>
# 装饰器本质上是一个函数，该函数用来处理其他函数，它可以让其他函数在不需要修改代码的前提下增加额外的功能，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等应用场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用.概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。
<函数修饰器>
def now():
    print ('2013-12-25')
f = now
f()   
print(f.__name__)
#%%
# 现在，假设我们要增强now()函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改now()函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。
# 本质上，decorator就是一个返回函数的高阶函数。所以，我们要定义一个能打印日志的decorator，可以定义如下：
def log(func):
    def wrapper(*args, **kw):
        print ('call %s():' % func.__name__)
        return func(*args, **kw)
    return wrapper
#######调用now时，会把now作为参数继续调用log # now = log(now)
@log
def now():
    print ('2013-12-25')
  
now()
# %%
now = log(now)
now()


<with语句>
with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源，比如文件使用后自动关闭、线程中锁的自动获取和释放等。
with context_expression [as target(s)]:
    with-body

<读取文本文件>
f = open("data.txt","r")   #设置文件对象
str = f.read()     #将txt文件的所有内容读入到字符串str中  # f.readline() 读取一行 # data_list = f.readlines()  #直接将文件中按行读到list里
f.close()   #将文件关闭

# 分行 ['1\n', '2\n', '3\n', '4\n', '一\n', '测试']
# 不分行 ['1', '2', '3', '4', '一', '测试']

